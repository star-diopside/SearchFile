<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllFileDialogFilter" xml:space="preserve">
    <value>すべてのファイル (*.*)|*.*</value>
    <comment>ファイル選択ダイアログの全ファイルフィルタ文字列</comment>
  </data>
  <data name="ClearFilesMessage" xml:space="preserve">
    <value>検索結果をクリアしました。</value>
    <comment>検索結果をクリアした場合のメッセージ</comment>
  </data>
  <data name="CopyFileNameMessage" xml:space="preserve">
    <value>{0} 個のファイル名をコピーしました。</value>
    <comment>クリップボードにファイル名をコピーした場合に示すメッセージ</comment>
  </data>
  <data name="CopyTargetFilesEmptyMessage" xml:space="preserve">
    <value>検索結果が空です。</value>
    <comment>ファイル名コピー対象が空の場合に示すメッセージ</comment>
  </data>
  <data name="DirectoryNotFoundMessage" xml:space="preserve">
    <value>ディレクトリが存在しません。</value>
    <comment>ディレクトリが見つからない場合に示すメッセージ</comment>
  </data>
  <data name="ErrorDialogCaption" xml:space="preserve">
    <value>エラー</value>
    <comment>エラーダイアログのキャプション</comment>
  </data>
  <data name="FileDeleteCancelMessage" xml:space="preserve">
    <value>削除処理をキャンセルしました。</value>
    <comment>ファイル削除キャンセル時に示すメッセージ</comment>
  </data>
  <data name="FileDeleteErrorMessage" xml:space="preserve">
    <value>削除処理中にエラーが発生しました。</value>
    <comment>ファイル削除エラー時に示すメッセージ</comment>
  </data>
  <data name="FileDeleteMessage" xml:space="preserve">
    <value>{0} 個のファイルを削除しました。</value>
    <comment>ファイル削除完了時に示すメッセージ</comment>
  </data>
  <data name="FolderBrowserDialogDescription" xml:space="preserve">
    <value>検索するフォルダを選択してください。</value>
    <comment>フォルダ選択ダイアログの説明テキスト</comment>
  </data>
  <data name="NotInputFileNameMessage" xml:space="preserve">
    <value>検索するファイル名を入力してください。</value>
    <comment>ファイル名が入力されていない場合に示すメッセージ</comment>
  </data>
  <data name="NotSelectSearchPatternMessage" xml:space="preserve">
    <value>検索パターンが指定されていません。</value>
    <comment>検索パターンが指定されていない場合に示すメッセージ</comment>
  </data>
  <data name="QuestionDialogCaption" xml:space="preserve">
    <value>確認</value>
    <comment>質問ダイアログのキャプション</comment>
  </data>
  <data name="QuestionFilesClearMessage" xml:space="preserve">
    <value>検索結果をクリアしてもよろしいですか？</value>
    <comment>検索結果クリア前の確認メッセージ</comment>
  </data>
  <data name="SearchingDirectoryMessage" xml:space="preserve">
    <value>{0} を検索中...</value>
    <comment>検索中ディレクトリを示すメッセージ</comment>
  </data>
  <data name="SearchingErrorMessage" xml:space="preserve">
    <value>検索中にエラーが発生しました。</value>
    <comment>検索中にエラーが発生した場合に示すメッセージ</comment>
  </data>
  <data name="SearchingResultMessage" xml:space="preserve">
    <value>{0} 個のファイルが見つかりました。</value>
    <comment>検索結果を示すメッセージ</comment>
  </data>
  <data name="SearchingStopMessage" xml:space="preserve">
    <value>検索を中止しました。</value>
    <comment>検索を中止した場合に示すメッセージ</comment>
  </data>
  <data name="ShowErrorDetailsTitle" xml:space="preserve">
    <value>エラーメッセージ:</value>
    <comment>エラーメッセージ詳細を表示する場合のタイトル</comment>
  </data>
  <data name="TextFileDialogFilter" xml:space="preserve">
    <value>テキストファイル (*.txt)|*.txt</value>
    <comment>ファイル選択ダイアログのテキストファイルフィルタ文字列</comment>
  </data>
  <data name="UIErrorQuestion" xml:space="preserve">
    <value>検索結果の表示処理中に例外が発生しました。検索処理を中止しますか？</value>
    <comment>ファイル検索時にUIエラーが発生した場合に処理を中止するかを確認するメッセージ</comment>
  </data>
  <data name="UsingInvalidFileNameMessage" xml:space="preserve">
    <value>ファイル名に使用できない文字が含まれています。</value>
    <comment>不正なファイル名が使用された場合のメッセージ</comment>
  </data>
  <data name="WarningDialogCaption" xml:space="preserve">
    <value>警告</value>
    <comment>警告ダイアログのキャプション</comment>
  </data>
</root>